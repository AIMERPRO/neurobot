import logging
import os
from typing import Optional

import schedule
import time
from datetime import datetime
import requests
from services.openai_service import OpenAIClient

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# env region
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_ASSIST_ID = os.getenv('OPENAI_ASSIST_ID')
OPENAI_MESSAGE_TO_CALL = os.getenv('OPENAI_MESSAGE_TO_CALL')
PROXY_URL = os.getenv('PROXY_URL')

CHANNEL_NAME = os.getenv('CHANNEL_NAME')
CHANNEL_LINK = os.getenv('CHANNEL_LINK')

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

POSTING_INTERVAL = int(os.getenv('POSTING_INTERVAL', '2'))
START_HOUR = int(os.getenv('START_HOUR', '4'))
END_HOUR = int(os.getenv('END_HOUR', '19'))
# end region


def get_openai_response(client: OpenAIClient, thread_id: str) -> Optional[str]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OPENAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    logger.info('–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç')
    try:
        response = client.get_answer(thread_id=thread_id,
                                     message=OPENAI_MESSAGE_TO_CALL)
        return response
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}')
        return None


def post_to_telegram(message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª."""
    logger.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º')
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    message = message.strip() + f"\n\n<a href='{CHANNEL_LINK}'>üëâ {CHANNEL_NAME} - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è</a>"
    payload = {"chat_id": CHAT_ID, "text": message, "parse_mode": "HTML"}
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def perform_task() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    current_hour = datetime.now().hour
    logger.info(current_hour)
#    if START_HOUR <= current_hour < END_HOUR:
#        openai_response = get_openai_response(client, thread_id)
#        if openai_response:
#            post_to_telegram(openai_response)
#        else:
#            logger.info('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI')


schedule.every(POSTING_INTERVAL).minutes.do(perform_task)


if __name__ == '__main__':
    logger.info('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω')
#    client = OpenAIClient(
#        api_key=OPENAI_API_KEY,
#        assistant_id=OPENAI_ASSIST_ID,
#	proxy_url=PROXY_URL
#    )
#    thread_id = client.start_threading()

    perform_task()

    while True:
        schedule.run_pending()
        time.sleep(1)
